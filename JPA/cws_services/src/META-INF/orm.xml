<?xml version="1.0" encoding="UTF-8"?>
<entity-mappings
	xmlns="http://java.sun.com/xml/ns/persistence/orm"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_2_0.xsd"
	version="2.0">

	<!-- Vehicle queries -->
	<named-query name="Vehicle.findByPlate">
		<query>select v from Vehicle v where v.plateNumber = ?1</query>
	</named-query>

	<!-- WorkOrder queries -->
	<named-query name="WorkOrder.findByIds">
		<query>select a from WorkOrder a where a.id in ?1</query>
	</named-query>

	<!-- PaymentMean queries -->
	<named-query name="PaymentMean.findByInvoiceId">
		<query>
			select m 
			from Invoice f 
				join f.workOrders w 
				join w.vehicle.client c 
				join c.paymentMeans m 
			where f.id = ?1
		</query>
	</named-query>

	<!-- Mechanic queries -->
	<named-query name="Mechanic.findByDni">
		<query>
			select m 
			from Mechanic m 
			where m.dni = ?1
		</query>
	</named-query>

	<!-- Invoice queries -->
	<named-query name="Invoice.findByNumber">
		<query>select f from Invoice f where f.number = ?1</query>
	</named-query>

	<named-query name="Invoice.getNextInvoiceNumber">
		<query>select max(f.number) + 1 from Invoice f</query>
	</named-query>

	<!-- Course queries -->
	<named-query name="Course.findByCode">
		<query>select c from Course c where c.code = ?1</query>
	</named-query>

	<!-- Enrollment queries -->
	<named-query name="Enrollment.findMechanicsEnrolled">
		<query>select distinct e.mechanic from Enrollment e</query>
	</named-query>

	<named-query name="Enrollment.getEnrollmentTime">
		<query>
			select SUM((((c.hours*d.percentage)/100)*e.attendance)/100) 
			from VehicleType v 
				join v.dedications d
				join d.course c
				join c.enrollments e
			where e.passed = true
			and e.mechanic.id = ?1
			and d.vehicleType.id = ?2
			group by v.minTrainingHours
		</query>
	</named-query>

	<!-- VehicleType queries -->
	<named-query name="VehicleType.findVehicleTypesDedicated">
		<query>
			select distinct v 
			from VehicleType v
				join v.dedications d
		</query>
	</named-query>

	<!-- Certificate queries -->
	<named-query name="Certificate.findByMechanicAndVehicleTypeIds">
		<query>
			select c 
			from Certificate c
			where c.mechanic.id = ?1
			and c.vehicleType.id = ?2
		</query>
	</named-query>

	<!-- Use this format if your query has numeric comparisons as the one in 
		this example <named-query name="findItemsOnSaleByCategoryId"> <query> <![CDATA[ 
		select i from Item i join i.categories c where c.id = ?2 and i.startDate 
		<= ?1 and i.endDate >= ?1 ]]> </query> </named-query> -->

</entity-mappings>